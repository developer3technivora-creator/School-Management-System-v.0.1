-- =============================================================================
-- Supabase Schema for School Management System (v3)
--
-- This script is organized to prevent dependency errors during execution.
-- 1. Drops all existing tables to ensure a clean slate.
-- 2. Creates all necessary tables for the application.
-- 3. Grants base-level permissions to roles (critical for RLS).
-- 4. Enables Row Level Security (RLS) and creates all security policies.
-- 5. Adds indexes for performance.
--
-- You can run this script in its entirety in the Supabase SQL Editor.
-- =============================================================================

-- =============================================
-- 1. Drop Existing Tables
-- =============================================
-- Drop tables in reverse order of dependency. CASCADE handles foreign keys automatically.
DROP TABLE IF EXISTS public.transport_alerts CASCADE;
DROP TABLE IF EXISTS public.transport_route_stops CASCADE;
DROP TABLE IF EXISTS public.transport_routes CASCADE;
DROP TABLE IF EXISTS public.transport_vehicles CASCADE;
DROP TABLE IF EXISTS public.meetings CASCADE;
DROP TABLE IF EXISTS public.invoices CASCADE;
DROP TABLE IF EXISTS public.announcements CASCADE;
DROP TABLE IF EXISTS public.school_events CASCADE;
DROP TABLE IF EXISTS public.attendance_records CASCADE;
DROP TABLE IF EXISTS public.homework CASCADE;
DROP TABLE IF EXISTS public.courses CASCADE;
DROP TABLE IF EXISTS public.staff_members CASCADE;
DROP TABLE IF EXISTS public.code_lookup_log CASCADE;
DROP TABLE IF EXISTS public.shareable_codes CASCADE;
DROP TABLE IF EXISTS public.school_students CASCADE;
DROP TABLE IF EXISTS public.schools CASCADE;
DROP TABLE IF EXISTS public.child_profile CASCADE;
DROP TABLE IF EXISTS public.guardian_profile CASCADE;


-- =============================================
-- 2. Create All Tables
-- =============================================

-- Table: guardian_profile
CREATE TABLE public.guardian_profile (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  is_primary boolean NOT NULL DEFAULT false,
  relation text,
  full_name text NOT NULL,
  email text,
  phone text,
  address text,
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT guardian_profile_user_id_is_primary_key UNIQUE (user_id, is_primary)
);
COMMENT ON TABLE public.guardian_profile IS 'Stores profiles for parents and guardians.';

-- Table: child_profile
CREATE TABLE public.child_profile (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name text NOT NULL,
  gender text,
  age integer,
  grade text,
  hobbies text,
  documents jsonb,
  created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.child_profile IS 'Stores profiles for children, linked to a guardian user.';

-- Table: schools
CREATE TABLE public.schools (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE,
  name text NOT NULL,
  code text NOT NULL UNIQUE,
  admin_username text,
  email text NOT NULL,
  phone text,
  address text,
  city text,
  state text,
  country text,
  school_type text,
  board text,
  principal_name text,
  logo_url text,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.schools IS 'Stores core information for each registered school.';

-- Table: school_students
CREATE TABLE public.school_students (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
  student_id uuid NOT NULL REFERENCES public.child_profile(id) ON DELETE CASCADE,
  student_unique_id text NOT NULL,
  parent_user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  added_date timestamptz NOT NULL DEFAULT now(),
  source_code text,
  CONSTRAINT school_students_school_id_student_id_key UNIQUE (school_id, student_id),
  CONSTRAINT school_students_student_unique_id_key UNIQUE (student_unique_id)
);
COMMENT ON TABLE public.school_students IS 'Tracks which students are admitted to which schools.';

-- Table: shareable_codes
CREATE TABLE public.shareable_codes (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  code text NOT NULL UNIQUE,
  type text NOT NULL,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  child_id uuid NOT NULL REFERENCES public.child_profile(id) ON DELETE CASCADE,
  is_active boolean NOT NULL DEFAULT true,
  expires_at timestamptz,
  created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.shareable_codes IS 'Stores single-use codes for parents to share data with schools.';

-- Table: code_lookup_log
CREATE TABLE public.code_lookup_log (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  school_user_id uuid REFERENCES auth.users(id),
  code text NOT NULL,
  result_status text NOT NULL,
  code_type text,
  lookup_time timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.code_lookup_log IS 'Logs attempts by schools to look up shareable codes.';

-- Table: staff_members
CREATE TABLE public.staff_members (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    staff_id text NOT NULL,
    full_name text NOT NULL,
    role text NOT NULL,
    email text NOT NULL,
    phone text,
    joining_date date,
    status text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.staff_members IS 'Stores profiles for all school faculty and staff.';

-- Table: courses
CREATE TABLE public.courses (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    course_name text NOT NULL,
    course_code text NOT NULL,
    grade_level text NOT NULL,
    subject text NOT NULL,
    description text,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.courses IS 'Manages all academic courses offered.';

-- Table: homework
CREATE TABLE public.homework (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    title text NOT NULL,
    instructions text,
    subject text NOT NULL,
    grade_level text NOT NULL,
    teacher text NOT NULL,
    assigned_date date NOT NULL,
    due_date date NOT NULL,
    attachment_link text,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.homework IS 'Manages homework assignments for different grades and subjects.';

-- Table: attendance_records
CREATE TABLE public.attendance_records (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_id uuid NOT NULL REFERENCES public.child_profile(id) ON DELETE CASCADE,
    date date NOT NULL,
    status text NOT NULL,
    notes text,
    created_at timestamptz NOT NULL DEFAULT now(),
    CONSTRAINT attendance_records_school_id_student_id_date_key UNIQUE (school_id, student_id, date)
);
COMMENT ON TABLE public.attendance_records IS 'Stores daily attendance status for each student.';

-- Table: school_events
CREATE TABLE public.school_events (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    title text NOT NULL,
    description text,
    start_date date NOT NULL,
    end_date date,
    category text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.school_events IS 'Manages the school event calendar.';

-- Table: announcements
CREATE TABLE public.announcements (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    title text NOT NULL,
    content text NOT NULL,
    author text,
    date date NOT NULL,
    audience jsonb,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.announcements IS 'Stores announcements broadcast to different user roles.';

-- Table: invoices
CREATE TABLE public.invoices (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_id uuid NOT NULL REFERENCES public.child_profile(id) ON DELETE CASCADE,
    invoice_number text NOT NULL,
    status text NOT NULL,
    items jsonb,
    total_amount numeric NOT NULL,
    issue_date date NOT NULL,
    due_date date NOT NULL,
    paid_date date,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.invoices IS 'Manages student fee invoices and payment status.';

-- Table: meetings
CREATE TABLE public.meetings (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    title text NOT NULL,
    date date NOT NULL,
    "time" time NOT NULL,
    type text NOT NULL,
    location_or_link text,
    attendees jsonb,
    agenda text,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.meetings IS 'Schedules and manages school meetings.';

-- Table: transport_vehicles
CREATE TABLE public.transport_vehicles (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    vehicle_number text NOT NULL,
    model text,
    capacity integer,
    status text,
    next_service_date date,
    driver_name text,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.transport_vehicles IS 'Manages the school transport fleet.';

-- Table: transport_routes
CREATE TABLE public.transport_routes (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    route_name text NOT NULL,
    route_number text NOT NULL,
    vehicle_id uuid REFERENCES public.transport_vehicles(id) ON DELETE SET NULL,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.transport_routes IS 'Defines transport routes.';

-- Table: transport_route_stops
CREATE TABLE public.transport_route_stops (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    route_id uuid NOT NULL REFERENCES public.transport_routes(id) ON DELETE CASCADE,
    name text NOT NULL,
    pickup_time time,
    dropoff_time time,
    assigned_students jsonb,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.transport_route_stops IS 'Defines stops for each transport route.';

-- Table: transport_alerts
CREATE TABLE public.transport_alerts (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id uuid NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    route_id uuid REFERENCES public.transport_routes(id) ON DELETE SET NULL,
    message text NOT NULL,
    severity text,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.transport_alerts IS 'Stores transport-related alerts sent to parents.';


-- =============================================
-- 3. Grant Base Permissions
-- =============================================
-- This is crucial. RLS policies often need to check other tables.
-- The 'authenticated' role needs base SELECT permission on those tables
-- for the policy check to succeed. RLS will still filter the rows correctly after this.
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO authenticated;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;


-- =============================================
-- 4. Enable RLS and Create Policies
-- =============================================

-- Policies for: guardian_profile
ALTER TABLE public.guardian_profile ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Guardians can manage their own profile" ON public.guardian_profile FOR ALL
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);
CREATE POLICY "School admins can view profiles of their students' parents" ON public.guardian_profile FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM school_students ss JOIN schools s ON ss.school_id = s.id
    WHERE s.user_id = auth.uid() AND ss.parent_user_id = guardian_profile.user_id
  ));

-- Policies for: child_profile
ALTER TABLE public.child_profile ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Guardians can manage their own children" ON public.child_profile FOR ALL
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);
CREATE POLICY "School admins can view profiles of their students" ON public.child_profile FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM school_students ss JOIN schools s ON ss.school_id = s.id
    WHERE s.user_id = auth.uid() AND ss.student_id = child_profile.id
  ));

-- Policies for: schools
ALTER TABLE public.schools ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage their own school" ON public.schools FOR ALL
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Authenticated users can view school details" ON public.schools FOR SELECT
  USING (auth.role() = 'authenticated');

-- Policies for: school_students
ALTER TABLE public.school_students ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage their student enrollments" ON public.school_students FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = school_students.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = school_students.school_id AND user_id = auth.uid()));
CREATE POLICY "Parents can view their children's enrollment" ON public.school_students FOR SELECT
  USING (auth.uid() = parent_user_id);

-- Policies for: shareable_codes
ALTER TABLE public.shareable_codes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Parents can manage their own shareable codes" ON public.shareable_codes FOR ALL
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);
CREATE POLICY "School admins can read active codes for lookup" ON public.shareable_codes FOR SELECT
  USING (EXISTS (SELECT 1 FROM schools WHERE user_id = auth.uid()));

-- Policies for: code_lookup_log
ALTER TABLE public.code_lookup_log ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage their own code lookup logs" ON public.code_lookup_log FOR ALL
  USING (auth.uid() = school_user_id)
  WITH CHECK (auth.uid() = school_user_id);

-- Policies for: staff_members
ALTER TABLE public.staff_members ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage their staff" ON public.staff_members FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = staff_members.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = staff_members.school_id AND user_id = auth.uid()));

-- Policies for: courses
ALTER TABLE public.courses ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage courses" ON public.courses FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = courses.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = courses.school_id AND user_id = auth.uid()));
CREATE POLICY "Authenticated users can view courses" ON public.courses FOR SELECT USING (auth.role() = 'authenticated');

-- Policies for: homework
ALTER TABLE public.homework ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage homework" ON public.homework FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = homework.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = homework.school_id AND user_id = auth.uid()));
CREATE POLICY "Parents and students can view relevant homework" ON public.homework FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM school_students ss JOIN child_profile cp ON ss.student_id = cp.id
    WHERE ss.parent_user_id = auth.uid() AND cp.grade = homework.grade_level AND ss.school_id = homework.school_id
  ));

-- Policies for: attendance_records
ALTER TABLE public.attendance_records ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage attendance for their students" ON public.attendance_records FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = attendance_records.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = attendance_records.school_id AND user_id = auth.uid()));
CREATE POLICY "Parents can view attendance of their own children" ON public.attendance_records FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM school_students WHERE student_id = attendance_records.student_id AND parent_user_id = auth.uid()
  ));

-- Policies for: school_events
ALTER TABLE public.school_events ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage events" ON public.school_events FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = school_events.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = school_events.school_id AND user_id = auth.uid()));
CREATE POLICY "Authenticated users can view events" ON public.school_events FOR SELECT USING (auth.role() = 'authenticated');

-- Policies for: announcements
ALTER TABLE public.announcements ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage announcements" ON public.announcements FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = announcements.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = announcements.school_id AND user_id = auth.uid()));
CREATE POLICY "Authenticated users can view announcements" ON public.announcements FOR SELECT USING (auth.role() = 'authenticated');

-- Policies for: invoices
ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage invoices for their students" ON public.invoices FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = invoices.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = invoices.school_id AND user_id = auth.uid()));
CREATE POLICY "Parents can view invoices of their own children" ON public.invoices FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM school_students WHERE student_id = invoices.student_id AND parent_user_id = auth.uid()
  ));

-- Policies for: meetings
ALTER TABLE public.meetings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage meetings" ON public.meetings FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = meetings.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = meetings.school_id AND user_id = auth.uid()));

-- Policies for: transport_vehicles
ALTER TABLE public.transport_vehicles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage transport vehicles" ON public.transport_vehicles FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = transport_vehicles.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = transport_vehicles.school_id AND user_id = auth.uid()));

-- Policies for: transport_routes
ALTER TABLE public.transport_routes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage transport routes" ON public.transport_routes FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = transport_routes.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = transport_routes.school_id AND user_id = auth.uid()));

-- Policies for: transport_route_stops
ALTER TABLE public.transport_route_stops ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage transport stops" ON public.transport_route_stops FOR ALL
  USING (EXISTS (
    SELECT 1 FROM transport_routes tr JOIN schools s ON tr.school_id = s.id
    WHERE tr.id = transport_route_stops.route_id AND s.user_id = auth.uid()
  ))
  WITH CHECK (EXISTS (
    SELECT 1 FROM transport_routes tr JOIN schools s ON tr.school_id = s.id
    WHERE tr.id = transport_route_stops.route_id AND s.user_id = auth.uid()
  ));

-- Policies for: transport_alerts
ALTER TABLE public.transport_alerts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "School admins can manage transport alerts" ON public.transport_alerts FOR ALL
  USING (EXISTS (SELECT 1 FROM schools WHERE id = transport_alerts.school_id AND user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM schools WHERE id = transport_alerts.school_id AND user_id = auth.uid()));


-- =============================================
-- 5. Indexes for Performance
-- =============================================
CREATE INDEX idx_guardian_profile_user_id ON public.guardian_profile(user_id);
CREATE INDEX idx_child_profile_user_id ON public.child_profile(user_id);
CREATE INDEX idx_school_students_school_id ON public.school_students(school_id);
CREATE INDEX idx_school_students_student_id ON public.school_students(student_id);
CREATE INDEX idx_shareable_codes_user_id ON public.shareable_codes(user_id);
CREATE INDEX idx_shareable_codes_child_id ON public.shareable_codes(child_id);
CREATE INDEX idx_attendance_records_student_id_date ON public.attendance_records(student_id, date);
CREATE INDEX idx_invoices_student_id ON public.invoices(student_id);
CREATE INDEX idx_homework_grade_level ON public.homework(grade_level);
